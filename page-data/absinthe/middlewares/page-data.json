{"componentChunkName":"component---src-templates-note-template-tsx","path":"/absinthe/middlewares","result":{"data":{"markdownRemark":{"html":"<ul>\n<li>reuse code or logic between resolvers</li>\n<li>Absinthe calls middlewares in order</li>\n</ul>\n<h4 id=\"adding-a-middleware\" style=\"position:relative;\"><a href=\"#adding-a-middleware\" aria-label=\"adding a middleware permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Adding a middleware</h4>\n<ul>\n<li>\n<p>Use <code class=\"language-text\">middleware/2</code> macro in <code class=\"language-text\">field</code></p>\n<ul>\n<li><code class=\"language-text\">resolve/1</code> uses middleware <code class=\"language-text\">Absinthe.Resolution</code></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\">defmacro resolve<span class=\"token punctuation\">(</span>function_ast<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n  quote <span class=\"token keyword\">do</span>\n    middle Absinthe<span class=\"token punctuation\">.</span>Resolution<span class=\"token punctuation\">,</span> unquote<span class=\"token punctuation\">(</span>function_ast<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n</li>\n<li>\n<p>Override <code class=\"language-text\">middleware/3</code> callback in your schema</p>\n<p>Example: apply a middleware on all mutations</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token keyword\">def</span> middleware<span class=\"token punctuation\">(</span>middleware<span class=\"token punctuation\">,</span> _field<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">%</span><span class=\"token punctuation\">{</span><span class=\"token attr-name\">identifier:</span> <span class=\"token atom symbol\">:mutation</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nmiddleware <span class=\"token operator\">++</span> <span class=\"token punctuation\">[</span>Middleware<span class=\"token punctuation\">.</span>ChangeSetErrors<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">def</span> middleware<span class=\"token punctuation\">(</span>middleware<span class=\"token punctuation\">,</span> _field<span class=\"token punctuation\">,</span> _object<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\nmiddleware\n<span class=\"token keyword\">end</span></code></pre></div>\n</li>\n</ul>\n<h4 id=\"setting-defaults\" style=\"position:relative;\"><a href=\"#setting-defaults\" aria-label=\"setting defaults permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setting defaults</h4>\n<p>when <code class=\"language-text\">def middleware</code> callback returns an empty list,</p>\n<p>Absinthe adds <code class=\"language-text\">[{Absinthe.Middleware.MapGet.field_identifier}]</code></p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token keyword\">def</span> call<span class=\"token punctuation\">(</span><span class=\"token punctuation\">%</span><span class=\"token punctuation\">{</span><span class=\"token attr-name\">source:</span> source<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> resolution<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n  <span class=\"token punctuation\">%</span><span class=\"token punctuation\">{</span>resolution <span class=\"token operator\">|</span> <span class=\"token attr-name\">state:</span> <span class=\"token atom symbol\">:resolved</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">value:</span> Map<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>you can use this if you want to resolve a value using string keys</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token keyword\">def</span> middleware<span class=\"token punctuation\">(</span>middleware<span class=\"token punctuation\">,</span> field<span class=\"token punctuation\">,</span> object<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n  new_middleware <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>Absinthe<span class=\"token punctuation\">.</span>Middleware<span class=\"token punctuation\">.</span>MapGet<span class=\"token punctuation\">,</span> to_string<span class=\"token punctuation\">(</span>field<span class=\"token punctuation\">.</span>identifier<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n\n  Absinthe<span class=\"token punctuation\">.</span>Schema<span class=\"token punctuation\">.</span>replace_default<span class=\"token punctuation\">(</span>middleware<span class=\"token punctuation\">,</span> new_middleware<span class=\"token punctuation\">,</span> field<span class=\"token punctuation\">,</span> object<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<h4 id=\"handle-changeset-errors\" style=\"position:relative;\"><a href=\"#handle-changeset-errors\" aria-label=\"handle changeset errors permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Handle changeset errors</h4>\n<p>Absinthe doesn't know how to parse changesets</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token comment\"># TODO</span></code></pre></div>","frontmatter":{"date":"April 25, 2021","path":"/absinthe/middlewares","title":"Middlewares","category":"Absinthe"}}},"pageContext":{}}}