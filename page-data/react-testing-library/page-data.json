{"componentChunkName":"component---src-templates-note-template-tsx","path":"/react-testing-library","result":{"data":{"markdownRemark":{"html":"<h2>Usage</h2>\n<pre><code>yarn add @testing-library/react --dev\n</code></pre>\n<p>You also need to configure a test runner like <a href=\"https://jestjs.io/\">jest</a></p>\n<h2>Basic test</h2>\n<pre><code class=\"language-javascript\">import { cleanup, render } from '@testing-library/react'\nimport React from 'react'\n\nimport SubmitButton from '../SubmitButton'\n\nafterEach(cleanup)\n\ndescribe('&#x3C;SubmitButton />', () => {\n  it('renders without crashing', () => {\n    const { getByTestId } = render(&#x3C;SubmitButton isAdmin={true} />)\n\n    getByTestId('submit-button')\n  })\n})\n</code></pre>\n<h2>Testing non existing element</h2>\n<p>Use <code>queryBy*</code>, <code>getBy*</code> throws an error if nothing is found.</p>\n<pre><code class=\"language-javascript\">import { cleanup, render } from '@testing-library/react'\nimport React from 'react'\n\nimport SubmitButton from '../SubmitButton'\n\nafterEach(cleanup)\n\ndescribe('&#x3C;SubmitButton />', () => {\n  it('should not render the component when isAdmin is false', () => {\n    const { queryByTestId } = render(&#x3C;SubmitButton isAdmin={false} />)\n\n    expect(queryByTestId('submit-button')).toBeNull()\n  })\n})\n</code></pre>\n<h2>Testing <code>useEffect</code> and mocking an api response</h2>\n<pre><code class=\"language-javascript\">import { cleanup, render, wait } from '@testing-library/react'\nimport React from 'react'\n\nimport Notifications from '../Notifications'\n\njest.mock('../../../api/notification', () => ({\n  fetchNotifications: jest.fn(() => {\n    return Promise.resolve({ unreadCount: 1, notifications: [] })\n  }),\n}))\n\nafterEach(cleanup)\n\ndescribe('&#x3C;Notifications/>', () => {\n  it('renders without crashing', async () => {\n    const { getByTestId } = render(&#x3C;Notifications />)\n\n    await wait(() => getByTestId('notifications'))\n  })\n\n  it('calls fetchNotifications onmount', async () => {\n    render(&#x3C;Notifications {...NotificationFixture} />)\n\n    expect(fetchNotifications).toHaveBeenCalled()\n  })\n})\n</code></pre>","frontmatter":{"date":"April 25, 2020","path":"/react-testing-library","title":"React Testing Library"}}},"pageContext":{}}}