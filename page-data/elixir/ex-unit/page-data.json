{"componentChunkName":"component---src-templates-note-template-tsx","path":"/elixir/ex-unit","result":{"data":{"markdownRemark":{"html":"<ul>\n<li>built-in in elixir</li>\n<li>will randomize the order of tests by default</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token keyword\">defmodule</span> Sample<span class=\"token punctuation\">.</span>AccountsTest <span class=\"token keyword\">do</span>\n  <span class=\"token keyword\">use</span> Sample<span class=\"token punctuation\">.</span>DataCase\n\n  <span class=\"token keyword\">alias</span> Sample<span class=\"token punctuation\">.</span>Accounts\n\n  <span class=\"token keyword\">import</span> ExUnit<span class=\"token punctuation\">.</span>CaptureLog\n\n  describe <span class=\"token string\">\"Accounts.find_user_by_id/1\"</span> <span class=\"token keyword\">do</span>\n    setup <span class=\"token keyword\">do</span>\n      user <span class=\"token operator\">=</span> insert<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:user</span><span class=\"token punctuation\">)</span>\n\n      <span class=\"token punctuation\">[</span><span class=\"token attr-name\">user:</span> user<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">end</span>\n\n    test <span class=\"token string\">\"finds a user with a valid id\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">%</span><span class=\"token punctuation\">{</span><span class=\"token attr-name\">user:</span> <span class=\"token punctuation\">%</span><span class=\"token punctuation\">{</span><span class=\"token attr-name\">id:</span> user_id<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">do</span>\n      assert <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">%</span>User<span class=\"token punctuation\">{</span><span class=\"token attr-name\">id:</span> <span class=\"token operator\">^</span>user_id<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> Accounts<span class=\"token punctuation\">.</span>find_user_by_id<span class=\"token punctuation\">(</span>user_id<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n\n  describe <span class=\"token string\">\"Accounts.create_user/1\"</span> <span class=\"token keyword\">do</span>\n    test <span class=\"token string\">\"creates a user when params is valid\"</span> <span class=\"token keyword\">do</span>\n      params <span class=\"token operator\">=</span> params_for<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:user</span><span class=\"token punctuation\">)</span>\n\n      assert <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> _user<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> Accounts<span class=\"token punctuation\">.</span>create_user<span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n\n    test <span class=\"token string\">\"returns error tuple when params is invalid\"</span> <span class=\"token keyword\">do</span>\n      assert capture_log<span class=\"token punctuation\">(</span><span class=\"token keyword\">fn</span> <span class=\"token operator\">-></span>\n        assert <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:error</span><span class=\"token punctuation\">,</span> _changeset<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> Accounts<span class=\"token punctuation\">.</span>create_user<span class=\"token punctuation\">(</span><span class=\"token punctuation\">%</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n             <span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=~</span> <span class=\"token string\">\"Failed to create user\"</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>","frontmatter":{"date":"March 23, 2021","path":"/elixir/ex-unit","title":"ExUnit","category":"Elixir"}}},"pageContext":{}}}